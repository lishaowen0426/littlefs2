/* automatically generated by rust-bindgen 0.65.1 */

pub const __bool_true_false_are_defined: u32 = 1;
pub const true_: u32 = 1;
pub const false_: u32 = 0;
pub const LFS_VERSION: u32 = 131074;
pub const LFS_VERSION_MAJOR: u32 = 2;
pub const LFS_VERSION_MINOR: u32 = 2;
pub const LFS_DISK_VERSION: u32 = 131072;
pub const LFS_DISK_VERSION_MAJOR: u32 = 2;
pub const LFS_DISK_VERSION_MINOR: u32 = 0;
pub const LFS_NAME_MAX: u32 = 255;
pub const LFS_FILE_MAX: u32 = 2147483647;
pub const LFS_ATTR_MAX: u32 = 1022;
pub type int_least64_t = i64;
pub type uint_least64_t = u64;
pub type int_fast64_t = i64;
pub type uint_fast64_t = u64;
pub type int_least32_t = i32;
pub type uint_least32_t = u32;
pub type int_fast32_t = i32;
pub type uint_fast32_t = u32;
pub type int_least16_t = i16;
pub type uint_least16_t = u16;
pub type int_fast16_t = i16;
pub type uint_fast16_t = u16;
pub type int_least8_t = i8;
pub type uint_least8_t = u8;
pub type int_fast8_t = i8;
pub type uint_fast8_t = u8;
pub type intmax_t = ::core::ffi::c_long;
pub type uintmax_t = ::core::ffi::c_ulong;
#[doc = " Definitions ///"]
pub type lfs_size_t = u32;
pub type lfs_off_t = u32;
pub type lfs_ssize_t = i32;
pub type lfs_soff_t = i32;
pub type lfs_block_t = u32;
pub const lfs_error_LFS_ERR_OK: lfs_error = 0;
pub const lfs_error_LFS_ERR_IO: lfs_error = -5;
pub const lfs_error_LFS_ERR_CORRUPT: lfs_error = -84;
pub const lfs_error_LFS_ERR_NOENT: lfs_error = -2;
pub const lfs_error_LFS_ERR_EXIST: lfs_error = -17;
pub const lfs_error_LFS_ERR_NOTDIR: lfs_error = -20;
pub const lfs_error_LFS_ERR_ISDIR: lfs_error = -21;
pub const lfs_error_LFS_ERR_NOTEMPTY: lfs_error = -39;
pub const lfs_error_LFS_ERR_BADF: lfs_error = -9;
pub const lfs_error_LFS_ERR_FBIG: lfs_error = -27;
pub const lfs_error_LFS_ERR_INVAL: lfs_error = -22;
pub const lfs_error_LFS_ERR_NOSPC: lfs_error = -28;
pub const lfs_error_LFS_ERR_NOMEM: lfs_error = -12;
pub const lfs_error_LFS_ERR_NOATTR: lfs_error = -61;
pub const lfs_error_LFS_ERR_NAMETOOLONG: lfs_error = -36;
pub type lfs_error = ::core::ffi::c_int;
pub const lfs_type_LFS_TYPE_REG: lfs_type = 1;
pub const lfs_type_LFS_TYPE_DIR: lfs_type = 2;
pub const lfs_type_LFS_TYPE_SPLICE: lfs_type = 1024;
pub const lfs_type_LFS_TYPE_NAME: lfs_type = 0;
pub const lfs_type_LFS_TYPE_STRUCT: lfs_type = 512;
pub const lfs_type_LFS_TYPE_USERATTR: lfs_type = 768;
pub const lfs_type_LFS_TYPE_FROM: lfs_type = 256;
pub const lfs_type_LFS_TYPE_TAIL: lfs_type = 1536;
pub const lfs_type_LFS_TYPE_GLOBALS: lfs_type = 1792;
pub const lfs_type_LFS_TYPE_CRC: lfs_type = 1280;
pub const lfs_type_LFS_TYPE_CREATE: lfs_type = 1025;
pub const lfs_type_LFS_TYPE_DELETE: lfs_type = 1279;
pub const lfs_type_LFS_TYPE_SUPERBLOCK: lfs_type = 255;
pub const lfs_type_LFS_TYPE_DIRSTRUCT: lfs_type = 512;
pub const lfs_type_LFS_TYPE_CTZSTRUCT: lfs_type = 514;
pub const lfs_type_LFS_TYPE_INLINESTRUCT: lfs_type = 513;
pub const lfs_type_LFS_TYPE_SOFTTAIL: lfs_type = 1536;
pub const lfs_type_LFS_TYPE_HARDTAIL: lfs_type = 1537;
pub const lfs_type_LFS_TYPE_MOVESTATE: lfs_type = 2047;
pub const lfs_type_LFS_FROM_NOOP: lfs_type = 0;
pub const lfs_type_LFS_FROM_MOVE: lfs_type = 257;
pub const lfs_type_LFS_FROM_USERATTRS: lfs_type = 258;
pub type lfs_type = ::core::ffi::c_uint;
pub const lfs_open_flags_LFS_O_RDONLY: lfs_open_flags = 1;
pub const lfs_open_flags_LFS_O_WRONLY: lfs_open_flags = 2;
pub const lfs_open_flags_LFS_O_RDWR: lfs_open_flags = 3;
pub const lfs_open_flags_LFS_O_CREAT: lfs_open_flags = 256;
pub const lfs_open_flags_LFS_O_EXCL: lfs_open_flags = 512;
pub const lfs_open_flags_LFS_O_TRUNC: lfs_open_flags = 1024;
pub const lfs_open_flags_LFS_O_APPEND: lfs_open_flags = 2048;
pub const lfs_open_flags_LFS_F_DIRTY: lfs_open_flags = 65536;
pub const lfs_open_flags_LFS_F_WRITING: lfs_open_flags = 131072;
pub const lfs_open_flags_LFS_F_READING: lfs_open_flags = 262144;
pub const lfs_open_flags_LFS_F_ERRED: lfs_open_flags = 524288;
pub const lfs_open_flags_LFS_F_INLINE: lfs_open_flags = 1048576;
pub const lfs_open_flags_LFS_F_OPENED: lfs_open_flags = 2097152;
pub type lfs_open_flags = ::core::ffi::c_uint;
pub const lfs_whence_flags_LFS_SEEK_SET: lfs_whence_flags = 0;
pub const lfs_whence_flags_LFS_SEEK_CUR: lfs_whence_flags = 1;
pub const lfs_whence_flags_LFS_SEEK_END: lfs_whence_flags = 2;
pub type lfs_whence_flags = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lfs_config {
    pub context: *mut ::core::ffi::c_void,
    pub read: ::core::option::Option<
        unsafe extern "C" fn(
            c: *const lfs_config,
            block: lfs_block_t,
            off: lfs_off_t,
            buffer: *mut ::core::ffi::c_void,
            size: lfs_size_t,
        ) -> ::core::ffi::c_int,
    >,
    pub prog: ::core::option::Option<
        unsafe extern "C" fn(
            c: *const lfs_config,
            block: lfs_block_t,
            off: lfs_off_t,
            buffer: *const ::core::ffi::c_void,
            size: lfs_size_t,
        ) -> ::core::ffi::c_int,
    >,
    pub erase: ::core::option::Option<
        unsafe extern "C" fn(c: *const lfs_config, block: lfs_block_t) -> ::core::ffi::c_int,
    >,
    pub sync:
        ::core::option::Option<unsafe extern "C" fn(c: *const lfs_config) -> ::core::ffi::c_int>,
    pub read_size: lfs_size_t,
    pub prog_size: lfs_size_t,
    pub block_size: lfs_size_t,
    pub block_count: lfs_size_t,
    pub block_cycles: i32,
    pub cache_size: lfs_size_t,
    pub lookahead_size: lfs_size_t,
    pub read_buffer: *mut ::core::ffi::c_void,
    pub prog_buffer: *mut ::core::ffi::c_void,
    pub lookahead_buffer: *mut ::core::ffi::c_void,
    pub name_max: lfs_size_t,
    pub file_max: lfs_size_t,
    pub attr_max: lfs_size_t,
}
#[test]
fn bindgen_test_layout_lfs_config() {
    const UNINIT: ::core::mem::MaybeUninit<lfs_config> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<lfs_config>(),
        112usize,
        concat!("Size of: ", stringify!(lfs_config))
    );
    assert_eq!(
        ::core::mem::align_of::<lfs_config>(),
        8usize,
        concat!("Alignment of ", stringify!(lfs_config))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).context) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(lfs_config),
            "::",
            stringify!(context)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).read) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(lfs_config),
            "::",
            stringify!(read)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).prog) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(lfs_config),
            "::",
            stringify!(prog)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).erase) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(lfs_config),
            "::",
            stringify!(erase)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).sync) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(lfs_config),
            "::",
            stringify!(sync)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).read_size) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(lfs_config),
            "::",
            stringify!(read_size)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).prog_size) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(lfs_config),
            "::",
            stringify!(prog_size)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).block_size) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(lfs_config),
            "::",
            stringify!(block_size)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).block_count) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(lfs_config),
            "::",
            stringify!(block_count)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).block_cycles) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(lfs_config),
            "::",
            stringify!(block_cycles)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).cache_size) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(lfs_config),
            "::",
            stringify!(cache_size)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).lookahead_size) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(lfs_config),
            "::",
            stringify!(lookahead_size)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).read_buffer) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(lfs_config),
            "::",
            stringify!(read_buffer)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).prog_buffer) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(lfs_config),
            "::",
            stringify!(prog_buffer)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).lookahead_buffer) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(lfs_config),
            "::",
            stringify!(lookahead_buffer)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).name_max) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(lfs_config),
            "::",
            stringify!(name_max)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).file_max) as usize - ptr as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(lfs_config),
            "::",
            stringify!(file_max)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).attr_max) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(lfs_config),
            "::",
            stringify!(attr_max)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lfs_info {
    pub type_: u8,
    pub size: lfs_size_t,
    pub name: [::core::ffi::c_char; 256usize],
}
#[test]
fn bindgen_test_layout_lfs_info() {
    const UNINIT: ::core::mem::MaybeUninit<lfs_info> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<lfs_info>(),
        264usize,
        concat!("Size of: ", stringify!(lfs_info))
    );
    assert_eq!(
        ::core::mem::align_of::<lfs_info>(),
        4usize,
        concat!("Alignment of ", stringify!(lfs_info))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(lfs_info),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(lfs_info),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(lfs_info),
            "::",
            stringify!(name)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lfs_attr {
    pub type_: u8,
    pub buffer: *mut ::core::ffi::c_void,
    pub size: lfs_size_t,
}
#[test]
fn bindgen_test_layout_lfs_attr() {
    const UNINIT: ::core::mem::MaybeUninit<lfs_attr> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<lfs_attr>(),
        24usize,
        concat!("Size of: ", stringify!(lfs_attr))
    );
    assert_eq!(
        ::core::mem::align_of::<lfs_attr>(),
        8usize,
        concat!("Alignment of ", stringify!(lfs_attr))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(lfs_attr),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).buffer) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(lfs_attr),
            "::",
            stringify!(buffer)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(lfs_attr),
            "::",
            stringify!(size)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lfs_file_config {
    pub buffer: *mut ::core::ffi::c_void,
    pub attrs: *mut lfs_attr,
    pub attr_count: lfs_size_t,
}
#[test]
fn bindgen_test_layout_lfs_file_config() {
    const UNINIT: ::core::mem::MaybeUninit<lfs_file_config> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<lfs_file_config>(),
        24usize,
        concat!("Size of: ", stringify!(lfs_file_config))
    );
    assert_eq!(
        ::core::mem::align_of::<lfs_file_config>(),
        8usize,
        concat!("Alignment of ", stringify!(lfs_file_config))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).buffer) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(lfs_file_config),
            "::",
            stringify!(buffer)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).attrs) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(lfs_file_config),
            "::",
            stringify!(attrs)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).attr_count) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(lfs_file_config),
            "::",
            stringify!(attr_count)
        )
    );
}
#[doc = " internal littlefs data structures ///"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lfs_cache {
    pub block: lfs_block_t,
    pub off: lfs_off_t,
    pub size: lfs_size_t,
    pub buffer: *mut u8,
}
#[test]
fn bindgen_test_layout_lfs_cache() {
    const UNINIT: ::core::mem::MaybeUninit<lfs_cache> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<lfs_cache>(),
        24usize,
        concat!("Size of: ", stringify!(lfs_cache))
    );
    assert_eq!(
        ::core::mem::align_of::<lfs_cache>(),
        8usize,
        concat!("Alignment of ", stringify!(lfs_cache))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).block) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(lfs_cache),
            "::",
            stringify!(block)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).off) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(lfs_cache),
            "::",
            stringify!(off)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(lfs_cache),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).buffer) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(lfs_cache),
            "::",
            stringify!(buffer)
        )
    );
}
#[doc = " internal littlefs data structures ///"]
pub type lfs_cache_t = lfs_cache;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lfs_mdir {
    pub pair: [lfs_block_t; 2usize],
    pub rev: u32,
    pub off: lfs_off_t,
    pub etag: u32,
    pub count: u16,
    pub erased: bool,
    pub split: bool,
    pub tail: [lfs_block_t; 2usize],
}
#[test]
fn bindgen_test_layout_lfs_mdir() {
    const UNINIT: ::core::mem::MaybeUninit<lfs_mdir> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<lfs_mdir>(),
        32usize,
        concat!("Size of: ", stringify!(lfs_mdir))
    );
    assert_eq!(
        ::core::mem::align_of::<lfs_mdir>(),
        4usize,
        concat!("Alignment of ", stringify!(lfs_mdir))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).pair) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(lfs_mdir),
            "::",
            stringify!(pair)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).rev) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(lfs_mdir),
            "::",
            stringify!(rev)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).off) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(lfs_mdir),
            "::",
            stringify!(off)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).etag) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(lfs_mdir),
            "::",
            stringify!(etag)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(lfs_mdir),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).erased) as usize - ptr as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(lfs_mdir),
            "::",
            stringify!(erased)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).split) as usize - ptr as usize },
        23usize,
        concat!(
            "Offset of field: ",
            stringify!(lfs_mdir),
            "::",
            stringify!(split)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).tail) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(lfs_mdir),
            "::",
            stringify!(tail)
        )
    );
}
pub type lfs_mdir_t = lfs_mdir;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lfs_dir {
    pub next: *mut lfs_dir,
    pub id: u16,
    pub type_: u8,
    pub m: lfs_mdir_t,
    pub pos: lfs_off_t,
    pub head: [lfs_block_t; 2usize],
}
#[test]
fn bindgen_test_layout_lfs_dir() {
    const UNINIT: ::core::mem::MaybeUninit<lfs_dir> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<lfs_dir>(),
        56usize,
        concat!("Size of: ", stringify!(lfs_dir))
    );
    assert_eq!(
        ::core::mem::align_of::<lfs_dir>(),
        8usize,
        concat!("Alignment of ", stringify!(lfs_dir))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(lfs_dir),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).id) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(lfs_dir),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(lfs_dir),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).m) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(lfs_dir),
            "::",
            stringify!(m)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).pos) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(lfs_dir),
            "::",
            stringify!(pos)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).head) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(lfs_dir),
            "::",
            stringify!(head)
        )
    );
}
pub type lfs_dir_t = lfs_dir;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lfs_file {
    pub next: *mut lfs_file,
    pub id: u16,
    pub type_: u8,
    pub m: lfs_mdir_t,
    pub ctz: lfs_file_lfs_ctz,
    pub flags: u32,
    pub pos: lfs_off_t,
    pub block: lfs_block_t,
    pub off: lfs_off_t,
    pub cache: lfs_cache_t,
    pub cfg: *const lfs_file_config,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lfs_file_lfs_ctz {
    pub head: lfs_block_t,
    pub size: lfs_size_t,
}
#[test]
fn bindgen_test_layout_lfs_file_lfs_ctz() {
    const UNINIT: ::core::mem::MaybeUninit<lfs_file_lfs_ctz> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<lfs_file_lfs_ctz>(),
        8usize,
        concat!("Size of: ", stringify!(lfs_file_lfs_ctz))
    );
    assert_eq!(
        ::core::mem::align_of::<lfs_file_lfs_ctz>(),
        4usize,
        concat!("Alignment of ", stringify!(lfs_file_lfs_ctz))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).head) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(lfs_file_lfs_ctz),
            "::",
            stringify!(head)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(lfs_file_lfs_ctz),
            "::",
            stringify!(size)
        )
    );
}
#[test]
fn bindgen_test_layout_lfs_file() {
    const UNINIT: ::core::mem::MaybeUninit<lfs_file> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<lfs_file>(),
        104usize,
        concat!("Size of: ", stringify!(lfs_file))
    );
    assert_eq!(
        ::core::mem::align_of::<lfs_file>(),
        8usize,
        concat!("Alignment of ", stringify!(lfs_file))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(lfs_file),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).id) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(lfs_file),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(lfs_file),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).m) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(lfs_file),
            "::",
            stringify!(m)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ctz) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(lfs_file),
            "::",
            stringify!(ctz)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(lfs_file),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).pos) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(lfs_file),
            "::",
            stringify!(pos)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).block) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(lfs_file),
            "::",
            stringify!(block)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).off) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(lfs_file),
            "::",
            stringify!(off)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).cache) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(lfs_file),
            "::",
            stringify!(cache)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).cfg) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(lfs_file),
            "::",
            stringify!(cfg)
        )
    );
}
pub type lfs_file_t = lfs_file;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lfs_superblock {
    pub version: u32,
    pub block_size: lfs_size_t,
    pub block_count: lfs_size_t,
    pub name_max: lfs_size_t,
    pub file_max: lfs_size_t,
    pub attr_max: lfs_size_t,
}
#[test]
fn bindgen_test_layout_lfs_superblock() {
    const UNINIT: ::core::mem::MaybeUninit<lfs_superblock> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<lfs_superblock>(),
        24usize,
        concat!("Size of: ", stringify!(lfs_superblock))
    );
    assert_eq!(
        ::core::mem::align_of::<lfs_superblock>(),
        4usize,
        concat!("Alignment of ", stringify!(lfs_superblock))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).version) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(lfs_superblock),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).block_size) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(lfs_superblock),
            "::",
            stringify!(block_size)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).block_count) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(lfs_superblock),
            "::",
            stringify!(block_count)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).name_max) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(lfs_superblock),
            "::",
            stringify!(name_max)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).file_max) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(lfs_superblock),
            "::",
            stringify!(file_max)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).attr_max) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(lfs_superblock),
            "::",
            stringify!(attr_max)
        )
    );
}
pub type lfs_superblock_t = lfs_superblock;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lfs_gstate {
    pub tag: u32,
    pub pair: [lfs_block_t; 2usize],
}
#[test]
fn bindgen_test_layout_lfs_gstate() {
    const UNINIT: ::core::mem::MaybeUninit<lfs_gstate> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<lfs_gstate>(),
        12usize,
        concat!("Size of: ", stringify!(lfs_gstate))
    );
    assert_eq!(
        ::core::mem::align_of::<lfs_gstate>(),
        4usize,
        concat!("Alignment of ", stringify!(lfs_gstate))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).tag) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(lfs_gstate),
            "::",
            stringify!(tag)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).pair) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(lfs_gstate),
            "::",
            stringify!(pair)
        )
    );
}
pub type lfs_gstate_t = lfs_gstate;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lfs {
    pub rcache: lfs_cache_t,
    pub pcache: lfs_cache_t,
    pub root: [lfs_block_t; 2usize],
    pub mlist: *mut lfs_lfs_mlist,
    pub seed: u32,
    pub gstate: lfs_gstate_t,
    pub gdisk: lfs_gstate_t,
    pub gdelta: lfs_gstate_t,
    pub free: lfs_lfs_free,
    pub cfg: *const lfs_config,
    pub name_max: lfs_size_t,
    pub file_max: lfs_size_t,
    pub attr_max: lfs_size_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lfs_lfs_mlist {
    pub next: *mut lfs_lfs_mlist,
    pub id: u16,
    pub type_: u8,
    pub m: lfs_mdir_t,
}
#[test]
fn bindgen_test_layout_lfs_lfs_mlist() {
    const UNINIT: ::core::mem::MaybeUninit<lfs_lfs_mlist> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<lfs_lfs_mlist>(),
        48usize,
        concat!("Size of: ", stringify!(lfs_lfs_mlist))
    );
    assert_eq!(
        ::core::mem::align_of::<lfs_lfs_mlist>(),
        8usize,
        concat!("Alignment of ", stringify!(lfs_lfs_mlist))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(lfs_lfs_mlist),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).id) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(lfs_lfs_mlist),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(lfs_lfs_mlist),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).m) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(lfs_lfs_mlist),
            "::",
            stringify!(m)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lfs_lfs_free {
    pub off: lfs_block_t,
    pub size: lfs_block_t,
    pub i: lfs_block_t,
    pub ack: lfs_block_t,
    pub buffer: *mut u32,
}
#[test]
fn bindgen_test_layout_lfs_lfs_free() {
    const UNINIT: ::core::mem::MaybeUninit<lfs_lfs_free> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<lfs_lfs_free>(),
        24usize,
        concat!("Size of: ", stringify!(lfs_lfs_free))
    );
    assert_eq!(
        ::core::mem::align_of::<lfs_lfs_free>(),
        8usize,
        concat!("Alignment of ", stringify!(lfs_lfs_free))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).off) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(lfs_lfs_free),
            "::",
            stringify!(off)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(lfs_lfs_free),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).i) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(lfs_lfs_free),
            "::",
            stringify!(i)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ack) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(lfs_lfs_free),
            "::",
            stringify!(ack)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).buffer) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(lfs_lfs_free),
            "::",
            stringify!(buffer)
        )
    );
}
#[test]
fn bindgen_test_layout_lfs() {
    const UNINIT: ::core::mem::MaybeUninit<lfs> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<lfs>(),
        152usize,
        concat!("Size of: ", stringify!(lfs))
    );
    assert_eq!(
        ::core::mem::align_of::<lfs>(),
        8usize,
        concat!("Alignment of ", stringify!(lfs))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).rcache) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(lfs),
            "::",
            stringify!(rcache)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).pcache) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(lfs),
            "::",
            stringify!(pcache)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).root) as usize - ptr as usize },
        48usize,
        concat!("Offset of field: ", stringify!(lfs), "::", stringify!(root))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).mlist) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(lfs),
            "::",
            stringify!(mlist)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).seed) as usize - ptr as usize },
        64usize,
        concat!("Offset of field: ", stringify!(lfs), "::", stringify!(seed))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).gstate) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(lfs),
            "::",
            stringify!(gstate)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).gdisk) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(lfs),
            "::",
            stringify!(gdisk)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).gdelta) as usize - ptr as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(lfs),
            "::",
            stringify!(gdelta)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).free) as usize - ptr as usize },
        104usize,
        concat!("Offset of field: ", stringify!(lfs), "::", stringify!(free))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).cfg) as usize - ptr as usize },
        128usize,
        concat!("Offset of field: ", stringify!(lfs), "::", stringify!(cfg))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).name_max) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(lfs),
            "::",
            stringify!(name_max)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).file_max) as usize - ptr as usize },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(lfs),
            "::",
            stringify!(file_max)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).attr_max) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(lfs),
            "::",
            stringify!(attr_max)
        )
    );
}
pub type lfs_t = lfs;
extern "C" {
    #[doc = " Filesystem functions ///"]
    pub fn lfs_format(lfs: *mut lfs_t, config: *const lfs_config) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn lfs_mount(lfs: *mut lfs_t, config: *const lfs_config) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn lfs_unmount(lfs: *mut lfs_t) -> ::core::ffi::c_int;
}
extern "C" {
    #[doc = " General operations ///"]
    pub fn lfs_remove(lfs: *mut lfs_t, path: *const ::core::ffi::c_char) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn lfs_rename(
        lfs: *mut lfs_t,
        oldpath: *const ::core::ffi::c_char,
        newpath: *const ::core::ffi::c_char,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn lfs_stat(
        lfs: *mut lfs_t,
        path: *const ::core::ffi::c_char,
        info: *mut lfs_info,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn lfs_getattr(
        lfs: *mut lfs_t,
        path: *const ::core::ffi::c_char,
        type_: u8,
        buffer: *mut ::core::ffi::c_void,
        size: lfs_size_t,
    ) -> lfs_ssize_t;
}
extern "C" {
    pub fn lfs_setattr(
        lfs: *mut lfs_t,
        path: *const ::core::ffi::c_char,
        type_: u8,
        buffer: *const ::core::ffi::c_void,
        size: lfs_size_t,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn lfs_removeattr(
        lfs: *mut lfs_t,
        path: *const ::core::ffi::c_char,
        type_: u8,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    #[doc = " File operations ///"]
    pub fn lfs_file_open(
        lfs: *mut lfs_t,
        file: *mut lfs_file_t,
        path: *const ::core::ffi::c_char,
        flags: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn lfs_file_opencfg(
        lfs: *mut lfs_t,
        file: *mut lfs_file_t,
        path: *const ::core::ffi::c_char,
        flags: ::core::ffi::c_int,
        config: *const lfs_file_config,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn lfs_file_close(lfs: *mut lfs_t, file: *mut lfs_file_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn lfs_file_sync(lfs: *mut lfs_t, file: *mut lfs_file_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn lfs_file_read(
        lfs: *mut lfs_t,
        file: *mut lfs_file_t,
        buffer: *mut ::core::ffi::c_void,
        size: lfs_size_t,
    ) -> lfs_ssize_t;
}
extern "C" {
    pub fn lfs_file_write(
        lfs: *mut lfs_t,
        file: *mut lfs_file_t,
        buffer: *const ::core::ffi::c_void,
        size: lfs_size_t,
    ) -> lfs_ssize_t;
}
extern "C" {
    pub fn lfs_file_seek(
        lfs: *mut lfs_t,
        file: *mut lfs_file_t,
        off: lfs_soff_t,
        whence: ::core::ffi::c_int,
    ) -> lfs_soff_t;
}
extern "C" {
    pub fn lfs_file_truncate(
        lfs: *mut lfs_t,
        file: *mut lfs_file_t,
        size: lfs_off_t,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn lfs_file_tell(lfs: *mut lfs_t, file: *mut lfs_file_t) -> lfs_soff_t;
}
extern "C" {
    pub fn lfs_file_rewind(lfs: *mut lfs_t, file: *mut lfs_file_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn lfs_file_size(lfs: *mut lfs_t, file: *mut lfs_file_t) -> lfs_soff_t;
}
extern "C" {
    #[doc = " Directory operations ///"]
    pub fn lfs_mkdir(lfs: *mut lfs_t, path: *const ::core::ffi::c_char) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn lfs_dir_open(
        lfs: *mut lfs_t,
        dir: *mut lfs_dir_t,
        path: *const ::core::ffi::c_char,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn lfs_dir_close(lfs: *mut lfs_t, dir: *mut lfs_dir_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn lfs_dir_read(
        lfs: *mut lfs_t,
        dir: *mut lfs_dir_t,
        info: *mut lfs_info,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn lfs_dir_seek(lfs: *mut lfs_t, dir: *mut lfs_dir_t, off: lfs_off_t)
        -> ::core::ffi::c_int;
}
extern "C" {
    pub fn lfs_dir_tell(lfs: *mut lfs_t, dir: *mut lfs_dir_t) -> lfs_soff_t;
}
extern "C" {
    pub fn lfs_dir_rewind(lfs: *mut lfs_t, dir: *mut lfs_dir_t) -> ::core::ffi::c_int;
}
extern "C" {
    #[doc = " Filesystem-level filesystem operations"]
    pub fn lfs_fs_size(lfs: *mut lfs_t) -> lfs_ssize_t;
}
extern "C" {
    pub fn lfs_fs_traverse(
        lfs: *mut lfs_t,
        cb: ::core::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::core::ffi::c_void,
                arg2: lfs_block_t,
            ) -> ::core::ffi::c_int,
        >,
        data: *mut ::core::ffi::c_void,
    ) -> ::core::ffi::c_int;
}
